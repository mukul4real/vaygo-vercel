{"ast":null,"code":"// import React, { Component } from 'react'\n// //import {Buffer} from 'buffer';\n// //import SimpleStorageContract from '../build/contracts/SimpleStorage.json'\n// //import getWeb3 from './utils/getWeb3'\n// import ipfs from './ipfs'\n\n// var fileBuffer\n\n// class Sample extends Component {\n\n//   constructor(props) {\n//     super(props)\n\n//     this.state = {\n//       // ipfsHash: '',\n//       // web3: null,\n//       // buffer: null,\n//       // account: null\n\n//       ipfsHash:'',\n//       storageValue:0,\n//       web3:null,\n//       buffer:null\n//     }\n//     this.captureFile = this.captureFile.bind(this);\n//     this.onSubmit = this.onSubmit.bind(this);\n//   }\n\n//   // componentWillMount() {\n//   //   // Get network provider and web3 instance.\n//   //   // See utils/getWeb3 for more info.\n\n//   //   getWeb3\n//   //   .then(results => {\n//   //     this.setState({\n//   //       web3: results.web3\n//   //     })\n\n//   //     // Instantiate contract once web3 provided.\n//   //     this.instantiateContract()\n//   //   })\n//   //   .catch(() => {\n//   //     console.log('Error finding web3.')\n//   //   })\n//   // }\n\n//   // instantiateContract() {\n//   //   /*\n//   //    * SMART CONTRACT EXAMPLE\n//   //    *\n//   //    * Normally these functions would be called in the context of a\n//   //    * state management library, but for convenience I've placed them here.\n//   //    */\n\n//   //   const contract = require('truffle-contract')\n//   //   const simpleStorage = contract(SimpleStorageContract)\n//   //   simpleStorage.setProvider(this.state.web3.currentProvider)\n\n//   //   var simpleStorageInstance\n\n//   //   // Get accounts.\n//   //   // this.state.web3.eth.getAccounts((error, accounts) => {\n//   //   //   simpleStorage.deployed().then((instance) => {\n//   //   //     this.simpleStorageInstance = instance\n//   //   //     this.setState({ account: accounts[0] })\n//   //   //     // Get the value from the contract to prove it worked.\n//   //   //     return this.simpleStorageInstance.get.call(accounts[0])\n//   //   //   }).then((ipfsHash) => {\n//   //   //     // Update state with the result.\n//   //   //     return this.setState({ ipfsHash })\n//   //   //   })\n//   //   // })\n//   // }\n\n//   captureFile(event) {\n//     var fileBuffer\n\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     const reader = new window.FileReader()\n//     reader.readAsArrayBuffer(file)\n\n//     // reader.onloadend = () => {\n\n//     //   this.setState({ buffer: Buffer(reader.result) })\n//     //   console.log('buffer', this.state.buffer)\n//     // }\n\n//     // reader.onload=function(){\n//     //   var arrayBuffer=reader.result\n//     //   var bytes=new Uint8Array(arrayBuffer)\n//     //   console.log(bytes)\n//     // }\n//     reader.onload=function() {\n//       var arrayBuffer=reader.result\n//       fileBuffer=new Uint8Array(arrayBuffer)\n//       console.log(\"Buffer:\",fileBuffer)\n//       ipfsUpload();\n//         function ipfsUpload()\n//       {\n//         console.log(\"Uploading...\");\n//         ipfs.add(fileBuffer, (error, result) => {\n//           if (error || !result) {\n//             console.log(\"Error!\");\n//           }\n//           else {\n//             console.log(\"Success!\");\n//           }\n\n//         });\n//       }     \n//     }\n//   }\n// //   onSubmit(event) {\n// //     event.preventDefault()\n// //   //ipfs.files.add(this.state.buffer, (error, result) => {\n// //    ipfs.add(fileBuffer, (error, result) => {\n// //        if(error) {\n// //        console.log('error')\n// //    }\n// //    else{\n// //      //this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n// //       console.log('submitting')\n// //         this.setState({ ipfsHash: result[0].hash })\n// //        console.log('ipfsHash', this.state.ipfsHash)\n// //    }\n// //      })\n// //   //})\n// //  }\n\n//   // onSubmit(event) {\n//   //    event.preventDefault()\n//   //  //ipfs.files.add(this.state.buffer, (error, result) => {\n//   //   ipfs.add(this.state.bytes, (error, result) => {\n//   //       if(error) {\n//   //       console.log(error)\n//   //       return true \n//   //   }\n//   //     //this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n//   //      console.log('submitting')\n//   //        this.setState({ ipfsHash: result[0].hash })\n//   //       console.log('ipfsHash', this.state.ipfsHash)\n//   //     })\n//   //  //})\n//   // }\n\n// //  \n\n// onSubmit(event) {\n//   event.preventDefault()\n//   //ipfs.add(fileBuffer).then(result=>{\n//     ipfs.add(fileBuffer=>{\n//       if(error){\n//         console.log(error)\n//       }\n//     else{\n//       console.log(\"success\")\n//     }\n//   });\n\n// //   })\n// }\n\n//   render() {\n//     return (\n//               <>\n\n//               <h1>Your Image</h1>\n//               <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n//              {/* <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>*/}\n//               <img src='' alt=''/>\n//               <h2>Upload Image</h2>\n//               <form onSubmit={this.onSubmit} >\n//                 <input type='file' onChange={this.captureFile} />\n//                 <input type='submit' />\n//               </form>\n//               </>\n\n//     );\n//   }\n// }\n\n// export default Sample","map":{"version":3,"names":[],"sources":["C:/Users/mukul/Desktop/College/vaygo-main/client/src/Sample.js"],"sourcesContent":["// import React, { Component } from 'react'\n// //import {Buffer} from 'buffer';\n// //import SimpleStorageContract from '../build/contracts/SimpleStorage.json'\n// //import getWeb3 from './utils/getWeb3'\n// import ipfs from './ipfs'\n\n// var fileBuffer\n\n// class Sample extends Component {\n  \n//   constructor(props) {\n//     super(props)\n\n//     this.state = {\n//       // ipfsHash: '',\n//       // web3: null,\n//       // buffer: null,\n//       // account: null\n\n//       ipfsHash:'',\n//       storageValue:0,\n//       web3:null,\n//       buffer:null\n//     }\n//     this.captureFile = this.captureFile.bind(this);\n//     this.onSubmit = this.onSubmit.bind(this);\n//   }\n  \n\n//   // componentWillMount() {\n//   //   // Get network provider and web3 instance.\n//   //   // See utils/getWeb3 for more info.\n\n//   //   getWeb3\n//   //   .then(results => {\n//   //     this.setState({\n//   //       web3: results.web3\n//   //     })\n \n//   //     // Instantiate contract once web3 provided.\n//   //     this.instantiateContract()\n//   //   })\n//   //   .catch(() => {\n//   //     console.log('Error finding web3.')\n//   //   })\n//   // }\n\n//   // instantiateContract() {\n//   //   /*\n//   //    * SMART CONTRACT EXAMPLE\n//   //    *\n//   //    * Normally these functions would be called in the context of a\n//   //    * state management library, but for convenience I've placed them here.\n//   //    */\n\n//   //   const contract = require('truffle-contract')\n//   //   const simpleStorage = contract(SimpleStorageContract)\n//   //   simpleStorage.setProvider(this.state.web3.currentProvider)\n\n//   //   var simpleStorageInstance\n\n//   //   // Get accounts.\n//   //   // this.state.web3.eth.getAccounts((error, accounts) => {\n//   //   //   simpleStorage.deployed().then((instance) => {\n//   //   //     this.simpleStorageInstance = instance\n//   //   //     this.setState({ account: accounts[0] })\n//   //   //     // Get the value from the contract to prove it worked.\n//   //   //     return this.simpleStorageInstance.get.call(accounts[0])\n//   //   //   }).then((ipfsHash) => {\n//   //   //     // Update state with the result.\n//   //   //     return this.setState({ ipfsHash })\n//   //   //   })\n//   //   // })\n//   // }\n\n//   captureFile(event) {\n//     var fileBuffer\n\n//     event.preventDefault()\n//     const file = event.target.files[0]\n//     const reader = new window.FileReader()\n//     reader.readAsArrayBuffer(file)\n   \n//     // reader.onloadend = () => {\n\n//     //   this.setState({ buffer: Buffer(reader.result) })\n//     //   console.log('buffer', this.state.buffer)\n//     // }\n\n//     // reader.onload=function(){\n//     //   var arrayBuffer=reader.result\n//     //   var bytes=new Uint8Array(arrayBuffer)\n//     //   console.log(bytes)\n//     // }\n//     reader.onload=function() {\n//       var arrayBuffer=reader.result\n//       fileBuffer=new Uint8Array(arrayBuffer)\n//       console.log(\"Buffer:\",fileBuffer)\n//       ipfsUpload();\n//         function ipfsUpload()\n//       {\n//         console.log(\"Uploading...\");\n//         ipfs.add(fileBuffer, (error, result) => {\n//           if (error || !result) {\n//             console.log(\"Error!\");\n//           }\n//           else {\n//             console.log(\"Success!\");\n//           }\n\n//         });\n//       }     \n//     }\n//   }\n// //   onSubmit(event) {\n// //     event.preventDefault()\n// //   //ipfs.files.add(this.state.buffer, (error, result) => {\n// //    ipfs.add(fileBuffer, (error, result) => {\n// //        if(error) {\n// //        console.log('error')\n// //    }\n// //    else{\n// //      //this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n// //       console.log('submitting')\n// //         this.setState({ ipfsHash: result[0].hash })\n// //        console.log('ipfsHash', this.state.ipfsHash)\n// //    }\n// //      })\n// //   //})\n// //  }\n\n\n//   // onSubmit(event) {\n//   //    event.preventDefault()\n//   //  //ipfs.files.add(this.state.buffer, (error, result) => {\n//   //   ipfs.add(this.state.bytes, (error, result) => {\n//   //       if(error) {\n//   //       console.log(error)\n//   //       return true \n//   //   }\n//   //     //this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n//   //      console.log('submitting')\n//   //        this.setState({ ipfsHash: result[0].hash })\n//   //       console.log('ipfsHash', this.state.ipfsHash)\n//   //     })\n//   //  //})\n//   // }\n\n// //  \n\n// onSubmit(event) {\n//   event.preventDefault()\n//   //ipfs.add(fileBuffer).then(result=>{\n//     ipfs.add(fileBuffer=>{\n//       if(error){\n//         console.log(error)\n//       }\n//     else{\n//       console.log(\"success\")\n//     }\n//   });\n  \n\n  \n// //   })\n// }\n\n  \n\n\n\n//   render() {\n//     return (\n//               <>\n\n//               <h1>Your Image</h1>\n//               <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n//              {/* <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>*/}\n//               <img src='' alt=''/>\n//               <h2>Upload Image</h2>\n//               <form onSubmit={this.onSubmit} >\n//                 <input type='file' onChange={this.captureFile} />\n//                 <input type='submit' />\n//               </form>\n//               </>\n\n//     );\n//   }\n// }\n\n// export default Sample"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}